apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: {{ .Release.Namespace }}-{{ .Values.appName }}
  name: {{ .Release.Namespace }}-{{ .Values.appName }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: {{ .Release.Namespace }}-{{ .Values.appName }}
  name: {{ .Release.Namespace }}-{{ .Values.appName }}
rules:
- apiGroups:
  - apps
  - monitoring.coreos.com
  resources:
  - deployments
  - statefulsets
  - servicemonitors
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - nodes
  - pods
  - endpoints
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  verbs:
  - get
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: {{ .Release.Namespace }}-{{ .Values.appName }}
  name: {{ .Release.Namespace }}-{{ .Values.appName }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Namespace }}-{{ .Values.appName }}
subjects:
- kind: ServiceAccount
  name: {{ .Release.Namespace }}-{{ .Values.appName }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
data:
  config.yml: |
    # logging configures logging parameters for the collector.
    logging:
    # level is the level of verbosity that the collector will emit --> Default is `info`.
      level: ${LOGGING_LEVEL:info}
    # metrics configuration - configures how the collector emits metrics.
    # Note: These metrics are produced by the collector itself.
    metrics:
      # scope configures how metric names will be formed.
      scope:
        # prefix defines prefix for all metric names.
        prefix: "{{ .Values.appName }}"
        # tags define custom tags that will be attached to every metric from the collector.
        tags: {}
      # prometheus defines options for the Prometheus reporter.
      prometheus:
        # handlerPath is the route on which metrics will be served.
        handlerPath: /metrics
      # sanitization indicates that metrics will be in the Prometheus format.
      sanitization: prometheus
      # samplingRate is the rate at which metrics will be sampled. Default is 1.0.
      samplingRate: 1.0
      # extended configures extra process level metrics that will be emitted.
      # Options include: none, simple, moderate, detailed, See below link for more information on options:
      # https://bit.ly/39v2yOO
      extended: none
    # wrapper configuration - configuration for the collector wrapper.
    wrapper:
      # listenAddress is the address that collector wrapper will serve requests on. Currently supports /metrics if enabled.
      listenAddress: "${LISTEN_ADDRESS:0.0.0.0:3029}"
      logFilter:
        # enables the log filtering configuration.
        enabled: ${LOG_FILTERING_ENABLED:false}
      # metrics configuration - configures how the collector wrapper emits metrics.
      # Note: These metrics are produced by the collector itself.
      metrics:
        # scope configures how metric names will be formed.
        scope:
          # prefix defines prefix for all metric names.
          prefix: "{{ .Values.appName }}"
          # tags define custom tags that will be attached to every metric from the collector.
          tags: {}
        # prometheus defines options for the Prometheus reporter.
        prometheus:
          # handlerPath is the route on which metrics will be served.
          handlerPath: /metrics
        # sanitization indicates that metrics will be in the Prometheus format.
        sanitization: prometheus
        # samplingRate is the rate at which metrics will be sampled. Default is 1.0.
        samplingRate: 1.0
        # extended configures extra process level metrics that will be emitted.
        # Options include: none, simple, moderate, detailed, See below link for more information on options:
        # https://bit.ly/39v2yOO
        extended: none
    # listenAddress is the address that collector will serve requests on. Currently supports /metrics and the remote write endpoint if enabled.
    listenAddress: "${LISTEN_ADDRESS:0.0.0.0:3031}"
    # labels defines key value pairs that will be appended to each metric being sent to the Chronosphere backend.
    labels:
      # defaults defines the default labels.
      defaults:
        kubernetes_cluster: ${KUBERNETES_CLUSTER_NAME:""}
        demo: "true"
        origin: "{{ required "CHRONOSPHERE_ORG_NAME(address) is required"  .Values.orgName }}-{{ .Release.Namespace }}-{{ .Values.appName }}"
    # backend defines what backend the collector forwards metrics to. The chronogateway is the main backend for Chronosphere. The below is needed to configure and send metrics to the `chronogateway`.
    backend:
      # type controls which backend configuration to read from. It can either be `gateway` or `prometheusRemoteWrite`.
      type: ${BACKEND_TYPE:gateway}
      # annotatedMetrics controls whether the backend supports annotated metrics in which case the collector will use an annotated write request to send the metrics.
      annotatedMetrics: ${BACKEND_ANNOTATED_METRICS:false}
      gateway:
        # address is what the collector sends to `company.chronosphere.io:443`. This can also be a proxy address.
        address: ${GATEWAY_ADDRESS:""}
        # servername is the gateway server name in case address is a proxy address.
        serverName: ${GATEWAY_SERVER_NAME:""}
        # insecure determines whether or not metrics are allowed via an insecure connection.
        # Note: Setting to `false` ensures that forwarding metrics are not allowed via an insecure connection. This should only be set to `true` for development purposes.
        insecure: ${GATEWAY_INSECURE:false}
        # cert and certSkipVerify are both related to the TLS. cert allows specifying a certificate chain for the CA.
        # certSkipVerify allows skipping the TLS verification.
        # Note: both cert and certSkipVerify are hardly ever used / used primarily for tesing.
        # The config is set to use the system’s default “certificate pool”, but fields can be altered if there are special requirements or a non-standard cert setup.
        cert: ${GATEWAY_CERT:""}
        certSkipVerify: ${GATEWAY_CERT_SKIP_VERIFY:false}
        # A file containing the API token. If present will override the env var setting.
        apiTokenFile: ${API_TOKEN_FILE:""}
    # discovery controls how the collector will discover targets to scrape.
    discovery:
      # kubernetes defines settings for discovering targets in the same Kubernetes cluster the collector is running in.
      kubernetes:
        # enabled indicates whether Kubernetes discovery is enabled.
        enabled: true
      # # serviceMonitorsEnabled indicates whether to use service monitors for job config generation.
        serviceMonitorsEnabled: true
      #   # endpointsDiscoveryEnabled discovery of endpoints. Requires service monitors to be enabled.
        endpointsDiscoveryEnabled: true
      #   # useEndpointSlices will use EndpointSlices instead of Endpoints when endpointsDiscoveryEnabled is tue.
      #   # Requires service monitors to be enabled, and the kubernetes server is running at least v1.19. EndpointSlices
      #   # are significantly less resource intensive and are highly recommended if using ServiceMonitors.
      #   useEndpointSlices: true
      #   # kubeSystemEndpointsDiscoveryEnabled allows additional discovery of kube system endpoints. This can get expensive.
      #   kubeSystemEndpointsDiscoveryEnabled: true
      #   # podMatchingStrategy determines how service monitors / annotations are to be used for discovery purposes. The
      #   # options are - all, annotations_first, service_monitors_first, service_monitors_only.
        podMatchingStrategy: service_monitors_first
      # kubeletMonitoring defines configuration for scraping metrics from kubelet on the host that the collector is running on.
        kubeletMonitoring:
    #      # enabled indicates whether or not the kubelet will be monitored. This is deprecated. Use the specific kubeletMetricsEnabled
    #      # and cadvisorMetricsEnabled flags.
          enabled: ${KUBERNETES_KUBELET_MONITORING_ENABLED:false}
    #      # port indicates the port that the kubelet is running on.
          port: 10250
    #      # bearerTokenFile indicates path to file containing collector service account token.
          bearerTokenFile: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          # # labelsToAugment indicates the pod labels to augment on to the kubelet metrics
          # labelsToAugment: ["app"]
          # # annotationsToAugment indicates the pod annotations to augment on to the kubelet metrics
          # annotationsToAugment: ["app.kubernetes.io/component"]
          # # The following two flags supersede the enabled flag above. Either the below two or enabled should be used, not both.
          # # kubeletMetricsEnabled enables kubelet metrics.
          kubeletMetricsEnabled: false
          # # cadvisorMetricsEnabled enables cadvisor metrics.
          cadvisorMetricsEnabled: false
          # # probesMetricsEnabled enables probes metrics.
          probesMetricsEnabled: false
    # # scrape is the global scrape config. It is not tied to a single job, and can be overridden with annotations and the job config.
    # # Visit the Scrape Config section under Collector documentation for more information.
    scrape:
    # # defaults are the global scrape options when none other are configured.
      defaults:
        scrapeInterval: "30s"
        scrapeTimeout: "30s"
    # kubernetes encapsulates configuration related to scraping metrics on Kubernetes.
    kubernetes:
      # client configures the Kubernetes client.
      client:
        # outOfCluster is true if the collector is running outside of a Kubernetes client (only used for testing).
        outOfCluster: ${KUBERNETES_CLIENT_OUT_OF_CLUSTER:false}
      # processor defines configuration for processing pods discovered on Kubernetes.
      processor:
        # annotationsPrefix is the prefix for annotations that the collector will use to scrape discovered pods.
        annotationsPrefix: ${KUBERNETES_PROCESSOR_ANNOTATIONS_PREFIX:"{{ .Values.orgName }}.chronosphere.io/"}
    # ingestion buffering configures any collector side ingest buffering
    ingestionBuffering:
      # The retry buffer is used to replay metric writes in the event of transient failures.
      # This is a best effort buffer
      retry:
        # enabled will toggle on the retry buffer
        enabled: true
        # This must be writable directory and is used to buffer failures
        directory: /etc/retry_buffer
        # How long individual metric uploads should be retried before being considered permanently failed.
        # Values greater than 90 seconds may lead to unexpected behavior and are not supported.
        defaultTTLInSeconds: 90
        # The collector will use strictly less than this amount of disk space.
        maxBufferSizeMB: 1024
    # debug configures the debug HTTP endpoints available at the listenAddress.
    debug:
      # disabled will toggle them off. By default this is false and they are enabled.
      disabled: false
    spans:
      enabled: true
      compression:
        enabled: true
      otel:
        enabled: true
        listenAddress: 0.0.0.0:4317
      # jaeger:
      #   enabled: false
      #   listenAddress: 0.0.0.0:6831
kind: ConfigMap
metadata:
  labels:
    app: {{ .Release.Namespace }}-{{ .Values.appName }}
  name: {{ .Release.Namespace }}-{{ .Values.appName }}-config
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
data:
  address: {{ cat .Values.orgName "chronosphere.io:443" | replace " " "."| b64enc | quote }}
  api-token: {{ required "CHRONOSPHERE_API_TOKEN(apiToken) is required" .Values.apiToken | b64enc | quote }}
kind: Secret
metadata:
  labels:
    app: {{ .Release.Namespace }}-{{ .Values.appName }}
  name: {{ .Release.Namespace }}-{{ .Values.appName }}-secret
  namespace: {{ .Release.Namespace }}
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Namespace }}-{{ .Values.appName }}
  name: {{ .Release.Namespace }}-{{ .Values.appName }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Namespace }}-{{ .Values.appName }}
  template:
    metadata:
      annotations:
        chronosphere.io/port: "3031"
        chronosphere.io/scrape: "true"
      labels:
        app: {{ .Release.Namespace }}-{{ .Values.appName }}
    spec:
      containers:
      - env:
        - name: GATEWAY_ADDRESS
          valueFrom:
            secretKeyRef:
              key: address
              name: {{ .Release.Namespace }}-{{ .Values.appName }}-secret
        - name: API_TOKEN
          valueFrom:
            secretKeyRef:
              key: api-token
              name: {{ .Release.Namespace }}-{{ .Values.appName }}-secret
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: gcr.io/chronosphereio/chronocollector:{{ .Values.collectorTag }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 3031
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: {{ .Release.Namespace }}-{{ .Values.appName }}
        ports:
        - containerPort: 3031
          hostPort: 3031
          name: http
        - containerPort: 4317
          hostPort: 4317
          name: otel
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 1000m
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/chronocollector
          name: {{ .Release.Namespace }}-{{ .Values.appName }}-config
      serviceAccount: {{ .Release.Namespace }}-{{ .Values.appName }}
      terminationGracePeriodSeconds: 5
      volumes:
      - configMap:
          name: {{ .Release.Namespace }}-{{ .Values.appName }}-config
        name: {{ .Release.Namespace }}-{{ .Values.appName }}-config
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ .Release.Namespace }}-{{ .Values.appName }}
  namespace: {{ .Release.Namespace }}
spec:
  endpoints:
  - port: http
    scheme: http
  jobLabel: component
  namespaceSelector:
    matchNames:
    - {{ .Release.Namespace }}
  selector:
    matchLabels:
      app: {{ .Release.Namespace }}-{{ .Values.appName }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Namespace }}-{{ .Values.appName }}
  labels:
      app: chronosphere-collector
      component: collector-tracing
  namespace: {{ .Release.Namespace }}
spec:
  clusterIP: None
  ports:
  - name: http
    port: 3031
    protocol: TCP
    targetPort: http
  - name: otel
    port: 4317
    protocol: TCP
    targetPort: otel
  selector:
      app: {{ .Release.Namespace }}-{{ .Values.appName }}
